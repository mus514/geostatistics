/////////////////////////////////////////////////////////
//     SCRIPT TO DOWNLOAD SENTINEL 2 DATA FOR SITES    //
//                  AUTHOR: Nikki A Moore              //
//                                                     //
//       Adapted from script by Patrick Osei Darko     //
/////////////////////////////////////////////////////////

// SPECIFY YEARS OF INTEREST
var START_YEAR = 2017
var END_YEAR = 2024

// Define  variables
var AOI = MSB_Extent // area of interest 
var CLOUD_FILTER = 20 
var CLD_PRB_THRESH = 50 // threshold for cloud cover
var NIR_DRK_THRESH = 0.15 // threshold for shadows cover
var CLD_PRJ_DIST = 1
var BUFFER = 50

// FUNCTIONS
/////////////////////////////////////////////////

// function to get S2 data for a specific month
function get_s2_sr_cld_col(aoi, start, end, month){
    // Import and filter S2
    var s2_sr_col = (ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
        .filterBounds(aoi)
        .filterDate(start, end)
        .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE', CLOUD_FILTER)))
        
        
 print(month, 'image_collection',s2_sr_col)
    // Import and filter s2cloudless.
    var s2_cloudless_col = (ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY')
        .filterBounds(aoi)
        .filterDate(start, end))
    
    // Join the filtered s2cloudless collection to the SR collection by the 'system:index' property.
    return ee.ImageCollection(ee.Join.saveFirst('s2cloudless').apply({
        'primary': s2_sr_col,
        'secondary': s2_cloudless_col,
        'condition': ee.Filter.equals({
            'leftField': 'system:index',
            'rightField': 'system:index'
        })
    }))
}

// CLOUD COMPONENTS
// Define a function to add the s2cloudless probability layer and derived cloud mask as bands to an S2 SR image input.
function add_cloud_bands(img){
    // Get s2cloudless image, subset the probability band.
    var cld_prb = ee.Image(img.get('s2cloudless')).select('probability')
    // Condition s2cloudless by the probability threshold value.
    var is_cloud = cld_prb.gt(CLD_PRB_THRESH).rename('clouds')
    // Add the cloud probability layer and cloud mask as image bands.
    return img.addBands(ee.Image([cld_prb, is_cloud]))
}

// SHADOW COMPONENTS
function add_shadow_bands(img){
    // Identify water pixels from the SCL band.
    var not_water = img.select('SCL').neq(6)
    // var not_water = img.normalizedDifference(['B3', 'B8']).lt(0.2) // Use this if you are using the TOA version
    // Identify dark NIR pixels that are not water (potential cloud shadow pixels).
    var SR_BAND_SCALE = 1e4
    var dark_pixels = img.select('B8').lt(NIR_DRK_THRESH*SR_BAND_SCALE).multiply(not_water).rename('dark_pixels')
    // Determine the direction to project cloud shadow from clouds (assumes UTM projection).
    var shadow_azimuth = ee.Number(90).subtract(ee.Number(img.get('MEAN_SOLAR_AZIMUTH_ANGLE')));
    // Project shadows from clouds for the distance specified by the CLD_PRJ_DIST input.
    var cld_proj = (img.select('clouds').directionalDistanceTransform(shadow_azimuth, CLD_PRJ_DIST*10)
        .reproject({'crs': img.select(0).projection(), 'scale': 100})
        .select('distance')
        .mask()
        .rename('cloud_transform'))
    // Identify the intersection of dark pixels with cloud shadow projection.
    var shadows = cld_proj.multiply(dark_pixels).rename('shadows')
    // Add dark pixels, cloud projection, and identified shadows as image bands.
    return img.addBands(ee.Image([dark_pixels, cld_proj, shadows]))
}

function add_cld_shdw_mask(img){
    // Add cloud component bands.
    var img_cloud = add_cloud_bands(img)
    // Add cloud shadow component bands.
    var img_cloud_shadow = add_shadow_bands(img_cloud)

    // Combine cloud and shadow mask, set cloud and shadow as value 1, else 0.
    var is_cld_shdw = img_cloud_shadow.select('clouds').add(img_cloud_shadow.select('shadows')).gt(0)

    // Remove small cloud-shadow patches and dilate remaining pixels by BUFFER input.
    // 20 m scale is for speed, and assumes clouds don't require 10 m precision.
    var is_cld_shdw2 = (is_cld_shdw.focal_min(2).focal_max(BUFFER*2/20)
        .reproject({'crs': img.select([0]).projection(), 'scale': 20})
        .rename('cloudmask'))

    // Add the final cloud-shadow mask to the image.
    return img_cloud_shadow.addBands(is_cld_shdw2)
}

function apply_cld_shdw_mask(img){
    //# Subset the cloudmask band and invert it so clouds/shadow are 0, else 1.
    var not_cld_shdw = img.select('cloudmask').not()

   // # Subset reflectance bands and update their masks, return the result.
    return img.select('B.*').updateMask(not_cld_shdw)
}

// CLEAN JOIN
function cleanJoin(feature){
    return ee.Feature(feature.get('primary')).copyProperties(feature.get('secondary'));
  }
  

// FOR EACH YEAR 
/////////////////////////////////////////////////
for (var y = START_YEAR; y <= END_YEAR; y++){
  
  // Convert year to ee string
  var year = ee.String(ee.Number(y));
  
  // DEFINE DATES
  /////////////////////////////////////////////////
  // June Date
  var START_JUNE = ee.String(year).cat('-06-01');
  var END_JUNE = ee.String(year).cat('-06-30');
  
  // July Date
  var START_JULY = ee.String(year).cat('-07-01');
  var END_JULY = ee.String(year).cat('-07-31');
  
  // August Date
  var START_AUGUST = ee.String(year).cat('-08-01');
  var END_AUGUST = ee.String(year).cat('-08-31');
  
  // September Date
  var START_SEPTEMBER = ee.String(year).cat('-09-01');
  var END_SEPTEMBER = ee.String(year).cat('-09-30');
  
  // Create strings with year_month_
  var jun_str = (year.cat('_June_Sentinel2')).getInfo();
  var jul_str = (year.cat('_July_Sentinel2')).getInfo();
  var aug_str = (year.cat('_Aug_Sentinel2')).getInfo();
  var sept_str = (year.cat('_Sept_Sentinel2')).getInfo();
  
  /////////////////////////////////////////////////////////////////////
  // GET S2 DATA FOR THAT YEAR & CORRECT FOR CLOUD COVER / SHADOWS
  /////////////////////////////////////////////////////////////////////
  
  // JUNE
  /////////////////////////////////////////////////
  var MONTH = ee.String('June');
  
  var s2_sr_cld_col_eval_june = get_s2_sr_cld_col(AOI, START_JUNE, END_JUNE, MONTH)
  
  var s2_sr_cld_col_june = get_s2_sr_cld_col(AOI, START_JUNE, END_JUNE, MONTH)
  var s2_sr_img_june = s2_sr_cld_col_june.map(add_cld_shdw_mask)
                               .map(apply_cld_shdw_mask)
  
  // JULY
  /////////////////////////////////////////////////
  var MONTH = ee.String('July');
  
  var s2_sr_cld_col_eval_july = get_s2_sr_cld_col(AOI, START_JULY, END_JULY, MONTH)
  
  var s2_sr_cld_col_july = get_s2_sr_cld_col(AOI, START_JULY, END_JULY, MONTH)
  var s2_sr_img_july = s2_sr_cld_col_july.map(add_cld_shdw_mask)
                               .map(apply_cld_shdw_mask)
  
  // AUGUST
  ////////////////////////////////////////////////////////////////////
  var MONTH = ee.String('August');
  
  var s2_sr_cld_col_eval_august = get_s2_sr_cld_col(AOI, START_AUGUST, END_AUGUST, MONTH)
  
  var s2_sr_cld_col_august = get_s2_sr_cld_col(AOI, START_AUGUST, END_AUGUST, MONTH)
  var s2_sr_img_august = s2_sr_cld_col_august.map(add_cld_shdw_mask)
                               .map(apply_cld_shdw_mask)
  
  // SEPTEMBER
  //////////////////////////////////////////////////////////////////////
  var MONTH = ee.String('September');
  
  var s2_sr_cld_col_eval_september = get_s2_sr_cld_col(AOI, START_SEPTEMBER, END_SEPTEMBER, MONTH)
  
  var s2_sr_cld_col_september = get_s2_sr_cld_col(AOI, START_SEPTEMBER, END_SEPTEMBER, MONTH)
  var s2_sr_img_september = s2_sr_cld_col_september.map(add_cld_shdw_mask)
                               .map(apply_cld_shdw_mask)
  
  ///////////////////////////////////////////////////////////////////
  
  
  // CREATE MAP OF RGB LAYERS FOR EACH MONTH
  ///////////////////////////////////////////////////////////////////
  var fc = ee.FeatureCollection(Target_Ecological_Unit)                 
  var mosaic_img_june = s2_sr_img_june.mosaic();
  var clipped_mosaic_june = mosaic_img_june.clipToCollection(fc);
  var mosaic_img_july = s2_sr_img_july.mosaic();
  var clipped_mosaic_july = mosaic_img_july.clipToCollection(fc)
  var mosaic_img_august = s2_sr_img_august.mosaic();
  var clipped_mosaic_august = mosaic_img_august.clipToCollection(fc)
  var mosaic_img_september = s2_sr_img_september.mosaic();
  var clipped_mosaic_september = mosaic_img_september.clipToCollection(fc)
  
  // var rgbVis = {
  //   min: 0,
  //   max: 3000,
  //   bands: ['B4', 'B3', 'B2']
    
  // };
  
  // // Output them as map layers 
  // // add _RGB
  // var jun_rgb = jun_str.cat('_RGB')
  // var jul_rgb = jul_str.cat('_RGB')
  // var aug_rgb = aug_str.cat('_RGB')
  // var sept_rgb = sept_str.cat('_RGB')
  // var test = 'test'
  
  // Map.centerObject(AOI, 13);
  // jun_rgb.evaluate(function (str) {
  //     Map.addLayer(clipped_mosaic_june, rgbVis, str);
  // })
  // jul_rgb.evaluate(function (str) {
  //     Map.addLayer(clipped_mosaic_july, rgbVis, str);
  // })
  // aug_rgb.evaluate(function (str) {
  //     Map.addLayer(clipped_mosaic_august, rgbVis, str);
  // })
  // sept_rgb.evaluate(function (str) {
  //     Map.addLayer(clipped_mosaic_september, rgbVis, str);
  // })
  
  
  ////////////////////////////////////////////////////////////////
  

  // EXPORT IMAGES TO DRIVE
  //////////////////////////////////////////////////////////////////
  
  // Export image to drive to check the pixels of baseline polygons.
  Export.image.toDrive({
    image: mosaic_img_june,
    description: jun_str,
    scale: 20,
    folder: 'GEE',
    region: MSB_Extent,
    fileFormat: 'GeoTIFF',
    formatOptions: {
      cloudOptimized: true
    }
  });
  
  Export.image.toDrive({
    image: mosaic_img_july,
    description: jul_str,
    scale: 20,
    folder: 'GEE',
    region: MSB_Extent,
    fileFormat: 'GeoTIFF',
    formatOptions: {
      cloudOptimized: true
    }
  });
  
  Export.image.toDrive({
    image: mosaic_img_august,
    description: aug_str,
    scale: 20,
    folder: 'GEE',
    region: MSB_Extent,
    fileFormat: 'GeoTIFF',
    formatOptions: {
      cloudOptimized: true
    }
  });
  
  Export.image.toDrive({
    image: mosaic_img_september,
    description: sept_str,
    scale: 20,
    folder: 'GEE',
    region: MSB_Extent,
    fileFormat: 'GeoTIFF',
    formatOptions: {
      cloudOptimized: true
    }
  });
  
}

// /////////////////////////////////////////////////////////////////////
// // EXPORT RGB FILES TO VISUALIZE SITES 
// /////////////////////////////////////////////////////////////////////

// var imgexport_june =mosaic_img_june.select(['B4', 'B3', 'B2'])
// // Export image to drive to check the pixels of baseline polygons.
// Export.image.toDrive({
//   image: imgexport_june,
//   description: 'Sentinel_June_RGB',
//   scale: 20,
//   folder: 'GEE',
//   region: MSB_Extent,
//   fileFormat: 'GeoTIFF',
//   formatOptions: {
//     cloudOptimized: true
//   }
// });

// var imgexport_july =mosaic_img_july.select(['B4', 'B3', 'B2'])
// // Export image to drive to check the pixels of baseline polygons.
// Export.image.toDrive({
//   image: imgexport_july,
//   description: 'Sentinel_July_RGB',
//   scale: 20,
//   folder: 'GEE',
//   region: MSB_Extent,
//   fileFormat: 'GeoTIFF',
//   formatOptions: {
//     cloudOptimized: true
//   }
// });

// var imgexport_august =mosaic_img_august.select(['B4', 'B3', 'B2'])
// // Export image to drive to check the pixels of baseline polygons.
// Export.image.toDrive({
//   image: imgexport_august,
//   description: 'Sentinel_August_RGB',
//   scale: 20,
//   folder: 'GEE',
//   region: MSB_Extent,
//   fileFormat: 'GeoTIFF',
//   formatOptions: {
//     cloudOptimized: true
//   }
// });

// var imgexport_september =mosaic_img_september.select(['B4', 'B3', 'B2'])
// // Export image to drive to check the pixels of baseline polygons.
// Export.image.toDrive({
//   image: imgexport_september,
//   description: 'Sentinel_September_RGB',
//   scale: 20,
//   folder: 'GEE',
//   region: MSB_Extent,
//   fileFormat: 'GeoTIFF',
//   formatOptions: {
//     cloudOptimized: true
//   }
// });